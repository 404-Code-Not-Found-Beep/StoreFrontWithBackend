{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jake\\\\github\\\\React course\\\\begining\\\\Capstone1-storefront\\\\01-starting-project\\\\src\\\\components\\\\Auth\\\\AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from \"react\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\"; //remember we are using v5 so useHistory is still a thing\n\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value; //add validation here\n\n    setIsLoading(true); //this if else is done by getting the url if logged in or not and attach\n    // the url to the same fetch function as the code is the same\n\n    let url;\n\n    if (isLogin) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCnr-1wO8bfm99LaYguLnmacZehovtdJ54\";\n    } else {\n      //can create your own custom hook, redux etc but we are going to use fetch\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCnr-1wO8bfm99LaYguLnmacZehovtdJ54\";\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      setIsLoading(false);\n\n      if (response.ok) {\n        // return the response json with no promise (the .then in the else)\n        return response.json();\n      } else {\n        //error\n        return response.json().then(data => {\n          let errorMessage = \"Something went wrong\";\n\n          if (data && data.error && data.error.message) {\n            errorMessage = data.error.message;\n          } //forwards the error message to the catch block at the end by\n          // throwing the error, causing this promis and the outer promise to be rejected\n\n\n          throw new Error(errorMessage); //can parse into the .message and match it and show custom errors\n        });\n      }\n    }).then(data => {\n      //we will end up here if we have a successful request\n      //so we know that direbase will have returned a token\n      console.log(data); //calling the login function in auth-Context\n      //login function wants the token so inside data from firebase theres a\n      //field called idToken\n      //the time given back from firebase (expiresIn) is in seconds not milliseconds\n      //+data.expires is to convert the string to a int\n\n      const expirationTime = new Date(new Date().getTime() + +data.expiresIn * 1000); //expirationTime needs to be handed too for profile form\n\n      authCtx.login(data.idToken, expirationTime.toISOString()); //redirect\n\n      history.replace(\"/\");\n    }).catch(err => {\n      //we will end up here if we have a non successful request\n      alert(err.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? \"Login\" : \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          \"data-cy\": \"enterEmail\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          \"data-cy\": \"enterPassword\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          \"data-cy\": \"submitSignup\",\n          children: isLogin ? \"Login\" : \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sending Request\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? \"Create new account\" : \"Login with existing account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"V9mgLlHICzGobfscsxv8TBwG27I=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"names":["useState","useRef","useContext","AuthContext","classes","useHistory","AuthForm","history","emailInputRef","passwordInputRef","authCtx","isLogin","setIsLogin","isLoading","setIsLoading","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","response","ok","json","data","errorMessage","error","message","Error","console","log","expirationTime","Date","getTime","expiresIn","login","idToken","toISOString","replace","catch","err","alert","auth","control","actions","toggle"],"sources":["C:/Users/Jake/github/React course/begining/Capstone1-storefront/01-starting-project/src/components/Auth/AuthForm.js"],"sourcesContent":["import { useState, useRef, useContext } from \"react\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\n\n//remember we are using v5 so useHistory is still a thing\nimport { useHistory } from \"react-router-dom\";\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    //add validation here\n\n    setIsLoading(true);\n\n    //this if else is done by getting the url if logged in or not and attach\n    // the url to the same fetch function as the code is the same\n    let url;\n    if (isLogin) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCnr-1wO8bfm99LaYguLnmacZehovtdJ54\";\n    } else {\n      //can create your own custom hook, redux etc but we are going to use fetch\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCnr-1wO8bfm99LaYguLnmacZehovtdJ54\";\n    }\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        setIsLoading(false);\n        if (response.ok) {\n          // return the response json with no promise (the .then in the else)\n          return response.json();\n        } else {\n          //error\n          return response.json().then((data) => {\n            let errorMessage = \"Something went wrong\";\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n            //forwards the error message to the catch block at the end by\n            // throwing the error, causing this promis and the outer promise to be rejected\n            throw new Error(errorMessage);\n            //can parse into the .message and match it and show custom errors\n          });\n        }\n      })\n      .then((data) => {\n        //we will end up here if we have a successful request\n        //so we know that direbase will have returned a token\n        console.log(data);\n        //calling the login function in auth-Context\n        //login function wants the token so inside data from firebase theres a\n        //field called idToken\n\n        //the time given back from firebase (expiresIn) is in seconds not milliseconds\n        //+data.expires is to convert the string to a int\n        const expirationTime = new Date(\n          new Date().getTime() + +data.expiresIn * 1000\n        );\n        //expirationTime needs to be handed too for profile form\n        authCtx.login(data.idToken, expirationTime.toISOString());\n        //redirect\n        history.replace(\"/\");\n      })\n      .catch((err) => {\n        //we will end up here if we have a non successful request\n        alert(err.message);\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            data-cy=\"enterEmail\"\n            required\n            ref={emailInputRef}\n          />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            data-cy=\"enterPassword\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button data-cy=\"submitSignup\">\n              {isLogin ? \"Login\" : \"Create Account\"}\n            </button>\n          )}\n          {isLoading && <p>Sending Request</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}